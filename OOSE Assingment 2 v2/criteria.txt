a)
Overall this application has no warnings or errors from the compiler of PMD, no warnings have been supressed. The application has been extensively commented where clarification may be needed to ensure full code understanding by the marker.



b)
This application has been broken up into several packages, classes, interfaces and methods. Each design pattern as well as the entry point of the applicaiton has been placed in its own package. Each file within a package is its own class or interface with some of them containing several methods.


c)
Error handling has been implemented in several places using a combination of exception handling and conditional statements to prevents issues however the application may still crash if the town is null, however, there is not enough time left to fix this.
Logging has been used extensively as alot of the debugging statements have been placed into log files. The logging files provide alot of useful information about railway states, population updates, goods transportation, and much more, however, the formatting is not as neat as in the application.



d)
My object factory utilizes dependency injection as the msgList is passed into it every day the object factory processed the messages in that list and created or updated objects accordingly based on the strings. the countdown for days until a state transition is also updated as well as the updating of all towns resources stockpiles


e)
My Observer pattern has been utilized to provide daily updates to the FileIO and GUI objects. It consists of the Subject class, the observer interface, and the observers which recieve all the updates and inherit the interface.

The daily update works by first adding the inherited observers into a list of observers held in the subject class. Next, every day the 
recieve update method is called and clears all of yesterdays data and replaces it with the most up to date information. Afterwards the notifyObservers method is called which calls the update method in every observer that is on the observers list.

This pattern is useful when multiple classes need to be notified about changes as well as being a good pattern that is very easy to expand with more observers.



f)
The state pattern adds a layer of complexity for the transportation of goods as it takes time for the railways to be built. I utilized the State pattern for my application. with two states building and built and the transitions from building->built as well as allowing only once to go back to building for the construction of 2 way railways.


My state pattern consists of the RailwayController class, the RailState Interface, the two inherited railway states (BuiltState and BuildingState) as well as some calling of methods and simple logic that happens in the object factory.

The logic of this implementation of state pattern starts from the object factory which has a list of railway controllers so that the state of every railway may be checked. Whenever a new railway is created it is added to the controllers list and later the startBuilding method is called for all controllers.
For two way tracks the method updateTwoWay is called instead which modifies the state back to building state.
The build method is called every day and the days left is decremented accordingly. When the days left reaches 0, the state is transitioned into built and when the build method is called again nothing will happen as the state is already built.


The implementation of the state pattern provided useful simulated build times for railways and new states can be added relitively easily, however, only two different states were sufficient for this assignment.
