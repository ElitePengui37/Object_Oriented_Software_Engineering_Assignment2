Total marks 45

6 marks     No errors in compiler or PMD
            Supress warnings if you give reason
            Have lots of comments


6 marks     Break program up into packages, classes, interfaces and methods


6 marks     Have exception handling and logging



6 marks     Have a factory with dependency injection    (Use factories for creating Rail and town objects) Stored in list I assume


7 marks     Use Observer pattern     (use observer patten in loop to notify changes to file/io and command line UI about changes in population and resources)


7 marks     State Pattern       (Use state pattern for rail built state    Under construction --> built)


7 marks     UML Diagrams        UML Class Diagram
                                UML State Diagram


no marks awarded but this will be the documentation
    Create criteria.txt file
    Write a response for all parts I did a-g






Implementation Plan


Have variable for Day and increment it each day for command line UI (not other UI)          ///     Later must send this to GUI object when observer pattern is implemented


read each new line using inp.nextMessage until message is not null (add to list)  msgList      ///

    Go throuh that list     //
    during this process look for strings    (check for predefined structure otherwise ignore result as provided file is an error check file alot to make sure you got all possibilities)       /
        town-founding   //
        railway-construction //
        railway-duplication //
            create new object using object factory //
            add that object to new list shown below //
    clear msgList before going onto the next cycle ///

add any new railways and connecctions to new list with town names and add flag in the string after a space to indicate single or dual direction ///
add towns to town object list ///

use observer pattern next to send from lists to file/io and command line (UI)
    Send population and track info to each and use method to calculate
        calculate:
            p: population
            rs: the number of single ended tracks that connect to that railway
            rd: the number of double eneded tracks that connect to that railway
            gs: goods in stockpile: (each person produces 1 good per day, each track can send 100 goods per day once sent they are consumed and no longer exist)
            gt: goods transported 

        After all this is calculated display it to the UI (terminal) & write updated data to file sumoutput.dot in the way asked by assingment (override file each day)

during each event loop check if railway is built using the state pattern
    state pattern has railway under construction   -->    railway completed
    (it takes 5 days (5 seconds) to build a railway and during that time it is unable to send goods)


a single ended track sends up to 100 goods per day (if it can in a single direction) and direction reverses each day
double ended tracks (railway-duplication) send up to 100 goods in both directions per day (no need to switch directions)






